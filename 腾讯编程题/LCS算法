//最长公共子序列--不要求子序列连续
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		while(sc.hasNext())
		{
			String  s1 = sc.nextLine();
			String  s2 = new StringBuilder(s1).reverse().toString();
			char[] a1 = s1.toCharArray();
			char[] a2 = s2.toCharArray();

			System.out.println( a1.length - getLCString(a1,a2) );	
			
		}
		sc.close();
	}
	
	public static int getLCString( char[] a,char[] b)
	{
		int[][] c = new int[a.length][b.length];
		//注意初始值的计算
		for(int i=0;i<a.length;i++)
		{
			if(a[i]==b[0]){
				c[i][0] = 1;
			}else if(i>0){
				c[i][0] = c[i-1][0];
			}
		}
		
		for(int j=0;j<b.length;j++)
		{
			if(a[0]==b[j]){
				c[0][j] = 1;
			}else if(j>0){
				c[0][j] = c[0][j-1];
			}
		}
		
		for(int i=1;i<a.length;i++)
		{
			for(int j=1;j<b.length;j++)
			{
				if(a[i]==b[j]){
					c[i][j] = c[i-1][j-1] + 1;
				}else{
					c[i][j] = Math.max(c[i-1][j], c[i][j-1]);
				}
			}
		}

		return c[a.length-1][b.length-1];
	}

}

import java.util.*;

public class Main
{
    public static void main(String[] args)
    {
       Scanner sc = new Scanner(System.in);
       while(sc.hasNext())
       {
           String s = sc.next();
           char[] s1 = s.toCharArray();
           char[] s2 = new StringBuilder(s).reverse().toString().toCharArray();
           System.out.println(  s1.length - getLCStirng(s1, s2));
       }
       sc.close();
    }
    
    public static int getLCStirng(char[] s1,char[] s2)
    {
        int len = s1.length;
        int[][] count = new int[len][len];
        if(s1[0]==s2[0])
        {
        	count[0][0] = 1;
        }
        for(int i=1;i<len;i++)
        {
            if(s1[i]==s2[0]){
                count[i][0] = 1;
            }else
            {
            	count[i][0] = count[i-1][0];
            }
        }
        
        for(int j=1;j<len;j++)
        {
            if(s1[0]==s2[j]){
                count[0][j] = 1;
            }else
            {
            	count[0][j] = count[0][j-1];
            }
        }
        
        for(int i=1;i<len;i++){
           for(int j=1;j<len;j++){
               if(s1[i]==s2[j]){
                   count[i][j] = count[i-1][j-1] + 1;
               }else{
                   count[i][j] = Math.max(count[i-1][j],count[i][j-1]);
               }
           }
        }
        return count[len-1][len-1];
    }
}
